1. Create a rating system. User rates a movie, similar movies' combined embeddings gets a certain multiplier to make them prominent. Maybe for the top 10 highest score from the recommendations. If there is a movie recommended to different movies which the user gave a rating then you calculate that and show it even more. Create a table for each user which holds the rating multiplier information. This table will be like for action genre you get +2.5 multiplier which comes from all the movies user rated. Ratings are not always positive so decide on a threshold(like 3/5) above this treshold positive ratings, below negative which reduces the chance of getting one of those similar movies. Final calculated score of all the negative and positive goes into the table mentioned.

2. Maybe use a chatbot for getting prompt from a user and give recommendation according to that prompt.(Might need fine tuning bert). Getting keywords like show movie or anime or action etc. and more than that maybe finding similarities between content overview and the prompt

3. Create a database. How do you store the model? Do you store the dataset? How do you update the dataset with the API idea? Create user schema for SQL think about what the user will be doing and how you can improve the experience. Users shouldn't get the movies they've watched. So db should hold the history of content. You can use trakt to populate the history maybe.

4. Copy the netflix UI from the projects and tweak it a little. Make different sections for recommendations like genre,type or overview similarity.


5. If the movie or the tv show doesn't exist. It should use the API get the content with the correct columns and information use create embeddings etc. finally add the new content to database or to the csv for future use.

6. Probably most of the users have watched the similar content already. So you need to go get lower scored recommendations which not be ideal. Maybe try to add variety in the recommendation model.

7. using Collaborative Filtering or Hybrid Models

8. 